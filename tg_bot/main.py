import asyncio
import logging
 
from aiogram import Dispatcher, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio import Redis

from models import *
from tg_bot.handlers.election import election_router
from tg_bot.states import Voting
from tg_bot.utils import *
from tg_bot.utils.delete_msg import delete_inline_message
from tg_bot.utils.handler_wrapper import decorator_for_context
from tg_bot.utils.keybord_gen import *
from tg_bot.utils.sql import *

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
r = Redis(host = "51.250.97.173", port = 7000, password = "fk7LvtQiqLbSwUe")
red_store=RedisStorage(redis = r)
dp = Dispatcher(storage = red_store)


dp.include_routers(election_router)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
@decorator_for_context
async def cmd_start(message: types.Message, state: FSMContext, session: Session, user: User):

    #–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    need_init =  not(await state.get_data())
    if need_init:
        init_dict = {"user_id": message.from_user.id, "name": None, "stud_id": None, 
                     "candidats": [], "against_all": None, "last_inline_messages": []}
        await state.update_data(init_dict)
    #–ú–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –±–æ—Ç–∞
    keyboard = make_row_keyboard(["üó≥ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å"], resize = True)
    await message.answer(WELCOME_START, reply_markup= keyboard)
    
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
@dp.message(Command("help"))
@decorator_for_context
async def cmd_start(message: types.Message, state: FSMContext):

    #–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await message.answer(HELP_MESSAGE,disable_web_page_preview=True)



#–æ–ø—Ü–∏—è-–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
@dp.message( F.text == "üó≥ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
@decorator_for_context
async def voting_start(message: types.Message, state: FSMContext, session: Session, user: User):

    
    storage = await state.get_data()
    
    #–µ—Å–ª–∏ –≥–æ–ª–æ—Å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if already_voted(session, user):
        await message.answer("‚ö†Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ\n<i>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–µ—Ä–∂–∫—É</i>: \n@marinad_12\n@gilerby")

    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ —É—Å–ø–µ–ª –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏—Ö-—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –Ω–æ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –≥–æ–ª–æ—Å
    #(—ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–∞–∫ –∫–∞–∫ –¥–æ–ø—É—Å–∫–∞–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é)
    elif storage["candidats"] or storage["against_all"]:

        await state.set_state(Voting.waiting_for_choises) 
        #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
        await delete_inline_message(storage,state)

        #–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
        keyboard= get_keyboard_inline([[INLINE_BUTTON_YES, "candidat_continue"], [INLINE_BUTTON_NOT,"candidat_startwithinfo"]], [1])
        inline_msg_id =  (await message.answer(MESSAGE_CONTINUE_OLD_VOTING_SESSION, reply_markup=keyboard)).message_id

       
   

        #–∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø–ª–∞–Ω–∏—É—Ä–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await state.update_data(last_inline_messages = storage["last_inline_messages"] + [inline_msg_id])
        
    #–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
    elif user.student_id:
        candidats_list = get_candidates(session,user)  # <- —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if not candidats_list:
            await message.answer("üôÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ 4 –∫—É—Ä—Å–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–¥–≤–∏–Ω—É–ª —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –≤ —á–ª–µ–Ω—ã –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –í–ú–ö.\n\n–í–∞—à –∫—É—Ä—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∫–∞–∑–∞–≤—à–∏–º—Å—è –æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ —Å–æ–≤–µ—Ç–µ.")

        else: 
            await state.set_state(Voting.waiting_for_choises)  

            #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
            await delete_inline_message(storage,state)

        
            text = prepare_candidat_info(session, user)
            await message.answer(text, disable_web_page_preview=True)
            keyboard = get_keyboard_inline ([[INLINE_BUTTON_WANT_TO_CHOOSE_TEXT, INLINE_BUTTON_WANT_TO_CHOOSE_ACTION],  
                                            [INLINE_BUTTON_AGAINST_ALL_TEXT, INLINE_BUTTON_AGAINST_ALL_ACTION]],[2])
            
            #–∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø–ª–∞–Ω–∏—É—Ä–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            inline_msg_id =  (await message.answer(MESSAGE_ELECTION_INFO, reply_markup=keyboard)).message_id
            await state.update_data(last_inline_messages = storage["last_inline_messages"] + [inline_msg_id])       
            

    #–ì–æ–ª–æ—Å—É–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏
    else:
        await delete_inline_message(storage, state)
        await state.set_state(Voting.waiting_for_name)
        await message.answer(MESSAGE_ENTER_YOUR_NAME)
    


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
def start():
  
    asyncio.run(dp.start_polling(bot))


if __name__ == '__main__':
    start()