from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext

from models import *
from tg_bot.states import Voting
from tg_bot.utils import *
from tg_bot.utils.delete_msg import delete_inline_message
from tg_bot.utils.handler_wrapper import decorator_for_context
from tg_bot.utils.keybord_gen import *
from tg_bot.utils.sql import *

election_router = Router()

#global list of can


# –ò–º—è –≤–≤–µ–¥–µ–Ω–æ, —É—Ç–æ—á–Ω—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏
@election_router.message(Voting.waiting_for_name, F.text)  
@decorator_for_context
async def wait_for_name(message: types.Message, state: FSMContext):
    
    await state.set_state(Voting.checking_the_name)
    await state.update_data(name = message.text)
    keyboard = make_row_keyboard([KEYBOARD_CORECT_FOR_REG, KEYBOARD_INCORECT_FOR_REG])
    await message.answer(f"–í–∞—Å –∑–æ–≤—É—Ç: \n\n{message.text}\n\n–í–µ—Ä–Ω–æ?", reply_markup=keyboard)


# –ò–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è
@election_router.message(Voting.checking_the_name, F.text == KEYBOARD_INCORECT_FOR_REG)  
@decorator_for_context
async def correct_the_name(message: types.Message, state: FSMContext): 
    await state.set_state(Voting.waiting_for_name)
    await state.update_data(name = '')
    await message.answer(MESSAGE_ENTER_YOUR_NAME)
   

# –ò–º—è –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—É–¥–∞–∫
@election_router.message(Voting.checking_the_name, F.text == KEYBOARD_CORECT_FOR_REG)  
@decorator_for_context
async def get_the_Stud_id(message: types.Message, state: FSMContext):
    await state.set_state(Voting.waiting_for_studid)
    await message.answer(MESSAGE_ENTER_YOUR_STUD_ID)



# –°—Ç—É–¥–∞–∫ –≤–≤–µ–¥–µ–Ω, —É—Ç–æ—á—è–Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏
@election_router.message(Voting.waiting_for_studid, F.text)  
@decorator_for_context
async def wait_for_studID(message: types.Message, state: FSMContext):
    await state.set_state(Voting.checking_the_studid)
    await state.update_data(stud_id = message.text)
    keyboard = make_row_keyboard([KEYBOARD_CORECT_FOR_REG, KEYBOARD_INCORECT_FOR_REG])
    await message.answer(f"–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞: \n\n{message.text}\n\n–í–µ—Ä–Ω–æ?",  reply_markup=keyboard)
    

# –°—Ç—É–¥–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø—Ä–æ—Å–∏–º –µ—â–µ —Ä–∞–∑
@election_router.message(Voting.checking_the_studid, F.text == KEYBOARD_INCORECT_FOR_REG)  
@decorator_for_context
async def correct_the_studID(message: types.Message, state: FSMContext):
    await state.set_state(Voting.waiting_for_studid) 
    await state.update_data(stud_id = '')
    await message.answer(MESSAGE_ENTER_YOUR_STUD_ID)
 
#–ü–æ–ª—É—á–∏–ª–∏ —Å—Ç—É–¥–∞–∫ –∏ –§–ò–û, –∏—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–∞—Ö
@election_router.message(Voting.checking_the_studid, F.text == KEYBOARD_CORECT_FOR_REG)  
@decorator_for_context
async def get_the_name(message: types.Message, state: FSMContext, session: Session, user: User):   

    #–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    storage = await state.get_data() 
    bd_response = name_in_studlist(session, storage)
    

    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º 
    if bd_response:
        add_studID(session,storage,user)
        candidats_list = get_candidates(session,user)  # <- —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if not candidats_list:
            await message.answer("üôÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ 4 –∫—É—Ä—Å–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–¥–≤–∏–Ω—É–ª —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –≤ —á–ª–µ–Ω—ã –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –í–ú–ö.\n\n–í–∞—à –∫—É—Ä—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∫–∞–∑–∞–≤—à–∏–º—Å—è –æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ —Å–æ–≤–µ—Ç–µ.")
            await state.set_state(None)
        else:
            if already_voted(session, user):
                await message.answer("‚ö†Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ\n<i>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–µ—Ä–∂–∫—É</i>: \n@marinad_12\n@gilerby")
            else:
                await state.set_state(Voting.waiting_for_choises) 
                    
                #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
                await delete_inline_message(storage, state)


                text = prepare_candidat_info(session, user)
                await message.answer(text, disable_web_page_preview=True)
                keyboard = get_keyboard_inline([[INLINE_BUTTON_WANT_TO_CHOOSE_TEXT, INLINE_BUTTON_WANT_TO_CHOOSE_ACTION], 
                                                [INLINE_BUTTON_AGAINST_ALL_TEXT, INLINE_BUTTON_AGAINST_ALL_ACTION]],[2])
                
                inline_msg_id =  (await message.answer(MESSAGE_ELECTION_INFO, reply_markup=keyboard)).message_id


                #–∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø–ª–∞–Ω–∏—É—Ä–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                await state.update_data(last_inline_messages = storage["last_inline_messages"] + [inline_msg_id])       
                
    #–ò–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    else: 
        await state.set_state(Voting.waiting_for_name)
        storage['STUD_ID'] = ''
        storage['NAME']    = ''
        await message.answer(MESSAGE_VOTER_INLINE_BUTTON_NOTT_IN_DATABASE)
            


@election_router.callback_query(Voting.waiting_for_choises, F.data.startswith("candidat") )
@decorator_for_context
async def callbacks_votecandidat(callback: types.CallbackQuery,  state: FSMContext,session: Session, user: User):
    candidat_index = callback.data.split("_")[1]   # <- —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞
    candidats_list = get_candidates(session,user)  # <- —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    storage = await state.get_data()

    match candidat_index:

        #–≠—Ç–æ –Ω–∞—á–∞–ª–æ. >--–ü—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö/–≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤--<
        case "start":
            
            await state.update_data(against_all = False, candidats = [])
            keyboard = get_keyboard_inline([[INLINE_BUTTON_WANT_TO_CHOOSE_TEXT, INLINE_BUTTON_WANT_TO_CHOOSE_ACTION], 
                                            [INLINE_BUTTON_AGAINST_ALL_TEXT, INLINE_BUTTON_AGAINST_ALL_ACTION]],[2])
            
            await callback.message.edit_text(MESSAGE_ELECTION_INFO,  reply_markup=keyboard)

        case "startwithinfo":
            await state.update_data(against_all = False, candidats = [])
            await delete_inline_message(storage, state)
            text = prepare_candidat_info(session, user)
            await callback.message.answer(text, disable_web_page_preview=True)
            keyboard = get_keyboard_inline([[INLINE_BUTTON_WANT_TO_CHOOSE_TEXT, INLINE_BUTTON_WANT_TO_CHOOSE_ACTION], 
                                            [INLINE_BUTTON_AGAINST_ALL_TEXT, INLINE_BUTTON_AGAINST_ALL_ACTION]],[2])
            
            inline_msg_id = (await callback.message.answer(MESSAGE_ELECTION_INFO,  reply_markup=keyboard)).message_id

            await state.update_data(last_inline_messages = storage["last_inline_messages"] + [inline_msg_id])


        #–†–µ—à–∏–ª–∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö. >--–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤/–Ω–∞–∑–∞–¥--<
        case "agree":
            await state.update_data(candidats = [])
            keyboard = get_keyboard_inline([[x.name, f"candidat_{x.id}"] for x in candidats_list] 
                                          +[[INLINE_BUTTON_STEP_BACK,"candidat_start"]], [1])
            
            await callback.message.edit_text("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", reply_markup = keyboard)

        #–†–µ—à–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö.  >--–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å/–æ—Ç–º–µ–Ω–∞--<
        case "disagree": 
            await state.update_data(against_all = True)
            keyboard=get_keyboard_inline([[INLINE_BUTTON_AGAINST_ALL_TEXT, "candidat_finish"],
                                          [INLINE_BUTTON_CANCEL, "candidat_start"]],[2])
            
            await callback.message.edit_text(MESSAGE_AGAINST_ALL_ENSURE,reply_markup=keyboard)

        
        #–†–µ—à–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ max(–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤).  >--–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å/–æ—Ç–º–µ–Ω–∞--<
        case "stop":
            
            keyboard = get_keyboard_inline([[INLINE_BUTTON_TO_VOTE, "candidat_finish"],[INLINE_BUTTON_CANCEL, 'candidat_notfinish']], [2])
            text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\nüìå" \
                   +"\n\nüìå ".join(map (lambda vote: vote.name, get_id_from_candidat(storage["candidats"], candidats_list)) ) \
                   + "\n\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–∞–µ—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä?" 
            await callback.message.edit_text(text, reply_markup = keyboard)
         
        #–ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ max(–∫–∞–¥–Ω–∏–¥–∞—Ç—ã), –∑–∞–Ω–æ—Å–∏–º –≤ –±–∞–∑—É
        case "finish":

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ –≥–æ–ª–æ—Å–∞ —É–∂–µ –≤ –±–∞–∑–µ
            if already_voted(session, user):
                await callback.message.edit_text("‚ö†Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É–∂–µ –µ—Å—Ç—å –±–∞–∑–µ!\n<i>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–µ—Ä–∂–∫—É</i>: \n@marinad_12\n@gilerby")

            else:
                msg = vote_to_database(session, storage,user)
                await callback.message.edit_text(msg)

            #–æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç    
            await state.clear()

        #–†–µ—à–∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—ã–±–æ—Ä max(–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)>--candidatlist/stop/back--<
        case  "notfinish":

            keyboard = get_keyboard_inline(kb := [[x.name, f"candidat_{x.id}"] for x in candidats_list  if x.id not in storage["candidats"]] \
                                          + [[INLINE_BUTTON_TO_VOTE, "candidat_stop"],[INLINE_BUTTON_CANCEL, "candidat_back"]], [1 ]*(len(kb)-2) + [2]) 
            text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\nüìå "+"\n\nüìå ".join(map (lambda vote: vote.name, get_id_from_candidat(storage["candidats"], candidats_list)) )
            await callback.message.edit_text(text, reply_markup = keyboard)
        
        #–æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        case "back":

            if storage["candidats"]:
                storage["candidats"].pop()

            await state.update_data(candidats = storage["candidats"])
            
            #–ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∏—Ç–∞, —Ç–æ —É–∂–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ >--candidat list/back--<
            if len(storage["candidats"])  == 0 :
                keyboard = get_keyboard_inline([[x.name,f"candidat_{x.id}"] for x in candidats_list] +[["–ù–∞–∑–∞–¥","candidat_start"]], [1])
                
                await callback.message.edit_text("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",reply_markup = keyboard)         
            #>--candidatlist/stop/back--<
            else:
                keyboard = get_keyboard_inline(kb := [[x.name, f"candidat_{x.id}"] for x in candidats_list  if x.id not in storage["candidats"]] \
                                             + [[INLINE_BUTTON_TO_VOTE, "candidat_stop"],[INLINE_BUTTON_STEP_BACK, "candidat_back"]], [1 ]*(len(kb)-2) + [2])
                await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\nüìå "+"\n\nüìå ".join(map (lambda vote: vote.name, get_id_from_candidat(storage["candidats"], candidats_list)) ), reply_markup = keyboard)

        #–≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        case _:
            #–µ—Å–ª–∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –∫–∞–∫–æ–≥–æ-—Ç–æ —ç—Ç–∞–ø–∞, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            flag = True if candidat_index == "continue" or len(storage["candidats"]) == min (max_can,len(candidats_list)) else False
            print(flag)
            #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö 
            if flag and storage["against_all"]:
                keyboard=get_keyboard_inline([[INLINE_BUTTON_AGAINST_ALL_TEXT, "candidat_finish"],
                                          [INLINE_BUTTON_CANCEL, "candidat_start"]],[2])
                await callback.message.edit_text(MESSAGE_AGAINST_ALL_ENSURE,reply_markup=keyboard)

            elif candidat_index not in list(map(str,storage["candidats"])):
                print(candidat_index)
                #–í–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                if not flag:
                   storage = await state.update_data(candidats = storage["candidats"] + [int(candidat_index)]) 

                #–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤ >--back/finish--<
                if len(storage["candidats"]) == min (max_can,len(candidats_list)) :
                    
                    keyboard = get_keyboard_inline([[INLINE_BUTTON_TO_VOTE, "candidat_finish"],[INLINE_BUTTON_CANCEL, 'candidat_back']], [2])
                    check = "\n\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–∞–µ—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä?" 
            
                #>--–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤/stop/back--<
                elif len(storage["candidats"]) < min (max_can,len(candidats_list)) :
                    print('ass')
                    keyboard = get_keyboard_inline(kb := [[x.name, f"candidat_{x.id}"] for x in candidats_list  if x.id not in storage["candidats"]] \
                            + [[INLINE_BUTTON_TO_VOTE, "candidat_stop"],[INLINE_BUTTON_STEP_BACK, "candidat_back"]], [1 ]*(len(kb)-2) + [2] )
                    check = ""



                text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\nüìå "+"\n\nüìå ".join(map (lambda vote: vote.name,  get_id_from_candidat(storage["candidats"], candidats_list)) ) + check
            
                await callback.message.edit_text(text, reply_markup= keyboard)
                

            
                
    




