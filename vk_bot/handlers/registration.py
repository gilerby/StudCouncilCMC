from sqlalchemy.orm import Session
from vkbottle import Keyboard, KeyboardButtonColor, Text
from vkbottle.bot import Message, MessageEvent

from models import Student, User
from vk_bot.config import SUPPORT_CONTACTS
from vk_bot.context_manager import (
    ActiveState,
    FinalState,
    StorageType,
)
from vk_bot.handlers import STORAGE_KEY, bot, context_manager
from vk_bot.util import answer, check_closest, get_user_id_from_message_or_event


async def get_user(user_id):
    return (await bot.api.users.get(user_ids=[user_id]))[0]


def get_yes_no_keyboard():
    return (
        Keyboard(one_time=True, inline=False)
        .add(Text("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ"), KeyboardButtonColor.SECONDARY)
        .row()
        .add(Text("‚ùå –ò—Å–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButtonColor.SECONDARY)
    )


@context_manager.on_state(ActiveState.registration)
async def request_name(
    message_or_event: Message | MessageEvent, session, storage
) -> FinalState:
    user = await get_user(get_user_id_from_message_or_event(message_or_event))
    students = (
        session.query(Student)
        .filter(Student.name.like(f"{user.last_name} {user.first_name}%"))
        .all()
    )
    if len(students) == 1:
        student = students[0]

        storage[STORAGE_KEY.FULL_NAME] = student.name
        storage[STORAGE_KEY.STUDENT_ID] = student.student_id

        await answer(
            message_or_event,
            message=(
                f"‚ùî –ö–∞–∂–µ—Ç—Å—è, —è –Ω–∞—à—ë–ª –í–∞—Å –≤ –±–∞–∑–µ. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"üë§ –í–∞—Å –∑–æ–≤—É—Ç:\n{student.name}\n\n"
                f"üÜî –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:\n{student.student_id}\n\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
            ),
            keyboard=get_yes_no_keyboard().get_json(),
        )

        return FinalState.waiting_for_approve_personal_info

    await answer(
        message_or_event,
        message="üìù –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).",
    )
    return FinalState.waiting_for_name


@context_manager.on_state(FinalState.waiting_for_name)
async def process_name_and_request_student_id(message: Message, storage: StorageType):
    name_arr = [n.capitalize() for n in message.text.lower().strip().split()]
    if not 2 <= len(name_arr) <= 3:
        await message.answer(
            "üòî –Ø –Ω–µ –ø–æ–Ω—è–ª –í–∞—Å :(\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)."
        )
        return FinalState.waiting_for_name

    full_name = " ".join(name_arr)
    storage[STORAGE_KEY.FULL_NAME] = full_name

    first_name = name_arr[1]
    storage[STORAGE_KEY.FIRST_NAME] = first_name

    await message.answer(
        f"{first_name}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞."
    )
    return FinalState.waiting_for_student_id


@context_manager.on_state(FinalState.waiting_for_student_id)
async def process_student_id_and_request_approve(
    message: Message, storage: StorageType
):
    student_id = message.text
    if not student_id.isdigit():
        await message.answer(
            "üòî –Ø –Ω–µ –ø–æ–Ω—è–ª –í–∞—Å :(\n–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä."
        )
        return FinalState.waiting_for_student_id
    storage[STORAGE_KEY.STUDENT_ID] = student_id

    await message.answer(
        f"‚òëÔ∏è –û—Ç–ª–∏—á–Ω–æ. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ –í–∞—Å –∑–æ–≤—É—Ç:\n{storage[STORAGE_KEY.FULL_NAME]}\n\n"
        f"üÜî –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:\n{storage[STORAGE_KEY.STUDENT_ID]}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        keyboard=get_yes_no_keyboard().get_json(),
    )
    return FinalState.waiting_for_approve_personal_info


@context_manager.on_state(FinalState.waiting_for_approve_personal_info)
async def process_approve_personal_info(
    message: Message, session: Session, user: User, storage: StorageType
):
    text = message.text.lower()
    if check_closest(text, ("–≤—Å—ë –≤–µ—Ä–Ω–æ", "–Ω–æ—Ä–º", "–¥–∞", "–≤–µ—Ä–Ω–æ")):
        student = (
            session.query(Student)
            .filter(Student.student_id == storage[STORAGE_KEY.STUDENT_ID])
            .filter(Student.name == storage[STORAGE_KEY.FULL_NAME])
            .one_or_none()
        )
        if not student:
            await message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –í–∞—Å –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                f"‚öôÔ∏è –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n{SUPPORT_CONTACTS}"
            )
            return FinalState.default

        user.student_id = student.id

        await message.answer("üó≥Ô∏è –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.")
        return ActiveState.voting
    elif check_closest(text, ("–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "–æ—à–∏–±–∫–∞", "–Ω–µ–≤–µ—Ä–Ω–æ", "–Ω–µ—Ç")):
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).")
        return FinalState.waiting_for_name

    await message.answer(
        'üòî –ù–µ –ø–æ–Ω—è–ª –í–∞—Å :(\n–ï—Å–ª–∏ –≤–≤—ë–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ "–≤–µ—Ä–Ω–æ", –∏–Ω–∞—á–µ "–∏—Å–ø—Ä–∞–≤–∏—Ç—å".'
    )
    return FinalState.waiting_for_approve_personal_info
